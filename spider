#!/bin/bash -u
#
# spider - ConquerClub API data downloader
#
#    Copyright (C) 2015 Rodrigo Silva (MestreLion) <conquerclub@rodrigosilva.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program. If not, see <http://www.gnu.org/licenses/gpl.html>

# TODO: automatic repair
# TODO: command-line arguments
# TODO: main logger
# TODO: check and install requirements
# TODO: automatically update last page


# Default options -------------------------------------------------------------

page=1         # absolute page to start with
batches=5      # how many batches to run
mode=gamelist  # download mode
jobs=20        # Number of simultaneous fetching jobs to run in parallel
args=10        # Number of pages to fetch sequentially on each job (keep_alive)
delay=2.0      # Delay between jobs, in seconds. 2.0 for "5 hits in 10s" policy
ppb=1000       # Number of pages per batch

verbose=1  # Verbose mode, output informative messages
yes=0      # Automatically answer "yes" to all questions


# Constants and other globals -------------------------------------------------

myname=${0##*/}
mydir=$(dirname "$(readlink -f "$0")")

urlmain="http://www.conquerclub.com/"

# Generic helper functions ----------------------------------------------------

bold()    { tput bold; printf '%s' "$@"; tput sgr0; }
red()     { tput setaf 1; bold "$@"; }
green()   { tput setaf 2; bold "$@"; }

fatal()   { if (($#)); then echo "$(red '* ' "$@")" >&2; fi; exit 1; }
message() { if ((verbose)); then echo "$(green '* ' "$@")"; fi; }
integer() { [[ "${1:-}" != *[!0-9]* ]] ||
            argerr "'${1:-}'${2:+ in $2} is not an integer." ; }
numeric() { [[ "$1" ]] || missing "$2" "${3-NUM}"; re='^[0-9]+([.][0-9]+)?$';
            [[ "$1" =~ $re ]] || argerr "'$1'${2:+ in $2} is not a number."; }
argerr()  { echo $(red "${myname}: ${1:-error}") >&2; usage 1; }
invalid() { argerr "invalid option: ${1:-}" ; }
missing() { argerr "missing ${2:+$2 }argument${1:+ from $1}." ; }

curtime() { date --rfc-3339=seconds; }
exists()  { type "$@" >/dev/null 2>&1; }
min()     { if (( "$1" < "$2" )); then echo "$1"; else echo "$2"; fi; }
max()     { if (( "$1" > "$2" )); then echo "$1"; else echo "$2"; fi; }

ceildiv() {
	local num=${1:-0}
	local div=${2:-1}
	echo $(( (num + div - 1) / div ))
}

ceilnear() {
	local num=${1:-0}
	local near=${2:-1000}
	echo $(( $(ceildiv "$num" "$near") * near ))
}

confirm()
{
	local msg=$(bold "${@:-"Confirm?"}")
	local default=$(bold "NO")
	local reply

	if ! ((yes)); then
		read -p "* $msg (y/n, default $default): " reply
		reply="${reply:-$default}"
		case "$reply" in
			[Yy]*) ;;
			*) message "Canceled"; exit 1;;
		esac
	fi
}

require() {
	local cmd="$1"
	shift
	local packages="${@:-$cmd}"
	local reqmsg="$myname requires '$cmd'"

	if exists "$cmd"; then return; fi

	exists apt-get || fatal "$reqmsg, please install it and try again."
	confirm "$reqmsg, want to install packages?" \
		" (need administrator priviledges)"
	message "Installing package ${packages[@]}"
	sudo apt-get install -y "${packages[@]}" ||
		fatal "Error installing packages (did you cancel it?)"
}


# Main functions --------------------------------------------------------------

usage() {
	cat <<-USAGE
	Usage: $myname [options]
	USAGE
	if [[ "${1:-}" ]] ; then
		cat >&2 <<- USAGE
		Try '$myname --help' for more information.
		USAGE
		exit 1
	fi
	cat <<-USAGE

	ConquerClub API data downloader

	Options:
	  -h|--help   - show this page
	  -q|--quiet  - do not output informative messages or progress

	Copyright (C) 2015 Rodrigo Silva (MestreLion) <linux@rodrigosilva.com>
	License: GPLv3 or later. See <http://www.gnu.org/licenses/gpl.html>
	USAGE
	exit 0
}


# Command-line arguments ------------------------------------------------------

for arg in "$@"; do [[ "$arg" == "-h" || "$arg" == "--help" ]] && usage ; done
while (( $# )); do
	case "$1" in
	--page=*        ) page=${1#*=}         ;;
	--batches=*     ) batches=${1#*=}      ;;
	--mode=*        ) mode=${1#*=}         ;;
	--jobs=*        ) jobs=${1#*=}         ;;
	--args=*        ) args=${1#*=}         ;;
	--delay=*       ) delay=${1#*=}        ;;
	--ppb=*         ) ppb=${1#*=}          ;;

	--page          ) shift ; page=$1      ;;
	--batches       ) shift ; batches=$1   ;;
	--mode          ) shift ; mode=$1      ;;
	--jobs          ) shift ; jobs=$1      ;;
	--args          ) shift ; args=$1      ;;
	--delay         ) shift ; delay=$1     ;;
	--ppb           ) shift ; ppb=$1       ;;

	--quiet         ) verbose=0            ;;
	--yes           ) yes=1                ;;

	-*              ) invalid "$1"         ;;
	*               ) argerr "$1"          ;;
	esac
	shift
done


# Requirements ----------------------------------------------------------------

require parallel  parallel
require 7z        p7zip-full


# Parallel set-up -------------------------------------------------------------

# Setup delay, only available in recent verions of parallel (20121222 onwards)
if echo | parallel --delay "$delay" >/dev/null 2>&1; then
	argdelay=(--delay "$delay")
else
	argdelay=()
	jobs=$(max "$jobs" 10)
fi

# If running a recent version of parallel that contains the BibTeX notice,
# and it's not silenced yet, display the notice once so the user can silence it,
# as per parallel's author request.
# Adding --no-notice also works, but it's rude. Let's support the author!
if echo | parallel --no-notice >/dev/null 2>&1 &&
	! [[ -f "$HOME"/.parallel/will-cite ]]
then
	parallel --bibtex
fi


# Main logic and procedures ---------------------------------------------------

case "$mode" in
gamelist)
	urlapi="$urlmain/api.php?mode=gamelist&events=Y&names=Y&page="
	pages=68720  # total number of pages
;;
tournamentlist)
	urlapi="$urlmain/api.php?mode=tournamentlist&names=Y&page="
	pages=267  # total number of pages
;;
*)
	fatal "unknown mode: $mode"
;;
esac

if ((verbose)); then
	message "Options:"
	echo "- Data mode:         $mode"
	echo "- Start Page:        $page"
	echo "- Number of batches: $batches"
	echo "- Simultaneous jobs: $jobs"
	echo "- Job delay:         $delay"
	echo "- Pages per job:     $args"
	echo "- Pages per batch:   $ppb"
fi

for batch in $(seq 1 "$batches"); do
	if [[ -f "stop" ]]; then
		echo "Stop requested"
		break
	fi

	# Calculate end page
	endpage=$((page + ppb - 1))

	if ((endpage > pages)); then
		endpage=$pages
	fi

	echo "$(curtime) - Starting batch $batch of $batches - pages $page - $endpage"

	dirname=$(printf '%03d' $(((page-1)/ppb)))
	tag="${mode}-${dirname}-pages-${page}-${endpage}"

	mkdir -p -- "$dirname"
	time seq "$page" "$endpage" |
	parallel --gnu --progress --joblog "$tag".log \
		--jobs "$jobs" --max-replace-args "$args" "${argdelay[@]}" -- \
			wget -q -P "'$dirname'" -- "'${urlapi}{}'"
	sleep "${delay}"

	# archive
	echo "$(curtime) - Batch $batch finished, compressing"
	cd "$dirname"
	7z a ../"$tag" -- * >/dev/null &  # 7z is way too chatty!
	cd - >/dev/null

	# get ready for next batch
	((page = endpage + 1))
	if ((page > pages)); then
		break
	fi
done

echo "Waiting for pending tasks..."
wait

echo "$(curtime) - Done!"
echo "Next page: $((page))"
